/******************************************************************************
 *
 * Computer Graphics Programming 2020 Project Template v1.0 (11/04/2021)
 *
 * Based on: Animation Controller v1.0 (11/04/2021)
 *
 * This template provides a basic FPS-limited render loop for an animated scene,
 * plus keyboard handling for smooth game-like control of an object such as a
 * character or vehicle.
 *
 * A simple static lighting setup is provided via initLights(), which is not
 * included in the animationalcontrol.c template. There are no other changes.
 *
 ******************************************************************************/

#include <Windows.h>
#include <freeglut.h>
#include <math.h>

 /******************************************************************************
  * Animation & Timing Setup
  ******************************************************************************/

  // Target frame rate (number of Frames Per Second).
#define TARGET_FPS 60				

// Ideal time each frame should be displayed for (in milliseconds).
const unsigned int FRAME_TIME = 1000 / TARGET_FPS;

// Frame time in fractional seconds.
// Note: This is calculated to accurately reflect the truncated integer value of
// FRAME_TIME, which is used for timing, rather than the more accurate fractional
// value we'd get if we simply calculated "FRAME_TIME_SEC = 1.0f / TARGET_FPS".
const float FRAME_TIME_SEC = (1000 / TARGET_FPS) / 1000.0f;

// Time we started preparing the current frame (in milliseconds since GLUT was initialized).
unsigned int frameStartTime = 0;

/******************************************************************************
 * Some Simple Definitions of Motion
 ******************************************************************************/

#define MOTION_NONE 0				// No motion.
#define MOTION_CLOCKWISE -1			// Clockwise rotation.
#define MOTION_ANTICLOCKWISE 1		// Anticlockwise rotation.
#define MOTION_BACKWARD -1			// Backward motion.
#define MOTION_FORWARD 1			// Forward motion.
#define MOTION_LEFT -1				// Leftward motion.
#define MOTION_RIGHT 1				// Rightward motion.
#define MOTION_DOWN -1				// Downward motion.
#define MOTION_UP 1					// Upward motion.

 // Represents the motion of an object on four axes (Yaw, Surge, Sway, and Heave).
 // 
 // You can use any numeric values, as specified in the comments for each axis. However,
 // the MOTION_ definitions offer an easy way to define a "unit" movement without using
 // magic numbers (e.g. instead of setting Surge = 1, you can set Surge = MOTION_FORWARD).
 //
typedef struct {
	int Yaw;		// Turn about the Z axis	[<0 = Clockwise, 0 = Stop, >0 = Anticlockwise]
	int Surge;		// Move forward or back		[<0 = Backward,	0 = Stop, >0 = Forward]
	int Sway;		// Move sideways (strafe)	[<0 = Left, 0 = Stop, >0 = Right]
	int Heave;		// Move vertically			[<0 = Down, 0 = Stop, >0 = Up]
} motionstate4_t;

/******************************************************************************
 * Keyboard Input Handling Setup
 ******************************************************************************/

 // Represents the state of a single keyboard key.Represents the state of a single keyboard key.
typedef enum {
	KEYSTATE_UP = 0,	// Key is not pressed.
	KEYSTATE_DOWN		// Key is pressed down.
} keystate_t;

// Represents the states of a set of keys used to control an object's motion.
typedef struct {
	keystate_t MoveForward;
	keystate_t MoveBackward;
	keystate_t MoveLeft;
	keystate_t MoveRight;
	keystate_t MoveUp;
	keystate_t MoveDown;
	keystate_t TurnLeft;
	keystate_t TurnRight;
} motionkeys_t;

// Current state of all keys used to control our "player-controlled" object's motion.
motionkeys_t motionKeyStates = {
	KEYSTATE_UP, KEYSTATE_UP, KEYSTATE_UP, KEYSTATE_UP,
	KEYSTATE_UP, KEYSTATE_UP, KEYSTATE_UP, KEYSTATE_UP };

// How our "player-controlled" object should currently be moving, solely based on keyboard input.
//
// Note: this may not represent the actual motion of our object, which could be subject to
// other controls (e.g. mouse input) or other simulated forces (e.g. gravity).
motionstate4_t keyboardMotion = { MOTION_NONE, MOTION_NONE, MOTION_NONE, MOTION_NONE };

// Define all character keys used for input (add any new key definitions here).
// Note: USE ONLY LOWERCASE CHARACTERS HERE. The keyboard handler provided converts all
// characters typed by the user to lowercase, so the SHIFT key is ignored.

#define KEY_MOVE_FORWARD	'w'
#define KEY_MOVE_BACKWARD	's'
#define KEY_MOVE_LEFT		'a'
#define KEY_MOVE_RIGHT		'd'
#define KEY_RENDER_FILL		'l'
#define KEY_EXIT			27 // Escape key.

// Define all GLUT special keys used for input (add any new key definitions here).

#define SP_KEY_MOVE_UP		GLUT_KEY_UP
#define SP_KEY_MOVE_DOWN	GLUT_KEY_DOWN
#define SP_KEY_TURN_LEFT	GLUT_KEY_LEFT
#define SP_KEY_TURN_RIGHT	GLUT_KEY_RIGHT


/******************************************************************************
 * GLUT Callback Prototypes
 ******************************************************************************/

void display(void);
void reshape(int width, int h);
void keyPressed(unsigned char key, int x, int y);
void specialKeyPressed(int key, int x, int y);
void keyReleased(unsigned char key, int x, int y);
void specialKeyReleased(int key, int x, int y);
void idle(void);

/******************************************************************************
 * Animation-Specific Function Prototypes (add your own here)
 ******************************************************************************/

void main(int argc, char **argv);
void init(void);
void think(void);
void initLights(void);

void drawSnowman(void);
void drawEye(enum Side side);
void drawBow(void);
void drawBand(void);
void drawOrigin(void);
void basicGround(void);

/******************************************************************************
 * Animation-Specific Setup (Add your own definitions, constants, and globals here)
 ******************************************************************************/

 // Render objects as filled polygons (1) or wireframes (0). Default filled.
int renderFillEnabled = 1;

//is the object to be drawn on the left (-x) or right (-y)
enum Side {
	leftSide = -1,
	rightSide = 1,
};

// window dimensions
GLint windowWidth = 800;
GLint windowHeight = 600;

// current camera position
GLfloat cameraPosition[] = { 0, 1, 10 };

// pointer to quadric objects
GLUquadricObj  *sphereQuadric;
GLUquadricObj  *cylinderQuadric;

//snowman hierachical model setup values
//dimensions of the body
#define BODY_RADIUS 2.0
//dimensions of the head
#define HEAD_RADIUS 1.5
//dimensions of the eyes
#define EYE_RADIUS 0.2

//bowtie dimensions
#define BOW_TIE_LENGTH 0.7
#define BOW_TIE_WIDTH 0.2
#define BAND_WIDTH 0.2

//bowtie rotation variable
float thetaBowTie = 0.0f;

GLfloat smPosition[3] = { 0.0f, 0.0f, 0.0f };
const float smSpeed = 2.0f; // Metres per second
float smHeading = 0.0; //which way is our snow man facing - here 0 is facing forwards looking at you


/******************************************************************************
 * Entry Point (don't put anything except the main function here)
 ******************************************************************************/

void main(int argc, char **argv)
{
	// Initialize the OpenGL window.
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(windowWidth, windowHeight);
	glutCreateWindow("Snowman Animation");

	// Set up the scene.
	init();

	// Disable key repeat (keyPressed or specialKeyPressed will only be called once when a key is first pressed).
	glutSetKeyRepeat(GLUT_KEY_REPEAT_OFF);

	// Register GLUT callbacks.
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keyPressed);
	glutSpecialFunc(specialKeyPressed);
	glutKeyboardUpFunc(keyReleased);
	glutSpecialUpFunc(specialKeyReleased);
	glutIdleFunc(idle);

	// Record when we started rendering the very first frame (which should happen after we call glutMainLoop).
	frameStartTime = (unsigned int)glutGet(GLUT_ELAPSED_TIME);

	// Enter the main drawing loop (this will never return).
	glutMainLoop();
}

/******************************************************************************
 * GLUT Callbacks (don't add any other functions here)
 ******************************************************************************/

 /*
	 Called when GLUT wants us to (re)draw the current animation frame.

	 Note: This function must not do anything to update the state of our simulated
	 world. Animation (moving or rotating things, responding to keyboard input,
	 etc.) should only be performed within the think() function provided below.
 */
void display(void)
{
	// clear the screen and depth buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// load the identity matrix into the model view matrix
	glLoadIdentity();

	//set up our camera - slightly up in the y so we can see the ground plane
	gluLookAt(cameraPosition[0], cameraPosition[1], cameraPosition[2], 0, 0, 0, 0, 1, 0);

	drawOrigin();

	glColor3f(1.0f, 1.0f, 1.0f);

	//only apply the transforms inside the push/pop to the snowman and ground
	glPushMatrix();

	//draw the snowman
	drawSnowman();

	//draw the ground
	basicGround();

	glPopMatrix();

	// swap the drawing buffers
	glutSwapBuffers();
}

/*
	Called when the OpenGL window has been resized.
*/
void reshape(int width, int h)
{
	windowHeight = h;
	windowWidth = width;

	glViewport(0, 0, windowWidth, windowHeight);

	glMatrixMode(GL_PROJECTION);

	glLoadIdentity();

	gluPerspective(60, (float)windowWidth / (float)windowHeight, 1, 20);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

/*
	Called each time a character key (e.g. a letter, number, or symbol) is pressed.
*/
void keyPressed(unsigned char key, int x, int y)
{
	//switch (tolower(key)) {
	//case KEY_MOVE_FORWARD:
	//	motionKeyStates.MoveForward = KEYSTATE_DOWN;
	//	keyboardMotion.Surge = MOTION_FORWARD;
	//	break;
	//case KEY_MOVE_BACKWARD:
	//	motionKeyStates.MoveBackward = KEYSTATE_DOWN;
	//	keyboardMotion.Surge = MOTION_BACKWARD;
	//	break;
	//case KEY_MOVE_LEFT:
	//	motionKeyStates.MoveLeft = KEYSTATE_DOWN;
	//	keyboardMotion.Sway = MOTION_LEFT;
	//	break;
	//case KEY_MOVE_RIGHT:
	//	motionKeyStates.MoveRight = KEYSTATE_DOWN;
	//	keyboardMotion.Sway = MOTION_RIGHT;
	//	break;
	//case KEY_RENDER_FILL:
	//	renderFillEnabled = !renderFillEnabled;
	//	break;
	//case KEY_EXIT:
	//	exit(0);
	//	break;
	//}
}

/*
	Called each time a "special" key (e.g. an arrow key) is pressed.
*/
void specialKeyPressed(int key, int x, int y)
{
	//switch (key) {
	//case SP_KEY_MOVE_UP:
	//	motionKeyStates.MoveUp = KEYSTATE_DOWN;
	//	keyboardMotion.Heave = MOTION_UP;
	//	break;
	//case SP_KEY_MOVE_DOWN:
	//	motionKeyStates.MoveDown = KEYSTATE_DOWN;
	//	keyboardMotion.Heave = MOTION_DOWN;
	//	break;
	//case SP_KEY_TURN_LEFT:
	//	motionKeyStates.TurnLeft = KEYSTATE_DOWN;
	//	keyboardMotion.Yaw = MOTION_ANTICLOCKWISE;
	//	break;
	//case SP_KEY_TURN_RIGHT:
	//	motionKeyStates.TurnRight = KEYSTATE_DOWN;
	//	keyboardMotion.Yaw = MOTION_CLOCKWISE;
	//	break;
	//}
}

/*
	Called each time a character key (e.g. a letter, number, or symbol) is released.
*/
void keyReleased(unsigned char key, int x, int y)
{
	//switch (tolower(key)) {
	//case KEY_MOVE_FORWARD:
	//	motionKeyStates.MoveForward = KEYSTATE_UP;
	//	keyboardMotion.Surge = (motionKeyStates.MoveBackward == KEYSTATE_DOWN) ? MOTION_BACKWARD : MOTION_NONE;
	//	break;
	//case KEY_MOVE_BACKWARD:
	//	motionKeyStates.MoveBackward = KEYSTATE_UP;
	//	keyboardMotion.Surge = (motionKeyStates.MoveForward == KEYSTATE_DOWN) ? MOTION_FORWARD : MOTION_NONE;
	//	break;
	//case KEY_MOVE_LEFT:
	//	motionKeyStates.MoveLeft = KEYSTATE_UP;
	//	keyboardMotion.Sway = (motionKeyStates.MoveRight == KEYSTATE_DOWN) ? MOTION_RIGHT : MOTION_NONE;
	//	break;
	//case KEY_MOVE_RIGHT:
	//	motionKeyStates.MoveRight = KEYSTATE_UP;
	//	keyboardMotion.Sway = (motionKeyStates.MoveLeft == KEYSTATE_DOWN) ? MOTION_LEFT : MOTION_NONE;
	//	break;
	//}
}

/*
	Called each time a "special" key (e.g. an arrow key) is released.
*/
void specialKeyReleased(int key, int x, int y)
{
	//switch (key) {
	//case SP_KEY_MOVE_UP:
	//	motionKeyStates.MoveUp = KEYSTATE_UP;
	//	keyboardMotion.Heave = (motionKeyStates.MoveDown == KEYSTATE_DOWN) ? MOTION_DOWN : MOTION_NONE;
	//	break;
	//case SP_KEY_MOVE_DOWN:
	//	motionKeyStates.MoveDown = KEYSTATE_UP;
	//	keyboardMotion.Heave = (motionKeyStates.MoveUp == KEYSTATE_DOWN) ? MOTION_UP : MOTION_NONE;
	//	break;
	//case SP_KEY_TURN_LEFT:
	//	motionKeyStates.TurnLeft = KEYSTATE_UP;
	//	keyboardMotion.Yaw = (motionKeyStates.TurnRight == KEYSTATE_DOWN) ? MOTION_CLOCKWISE : MOTION_NONE;
	//	break;
	//case SP_KEY_TURN_RIGHT:
	//	motionKeyStates.TurnRight = KEYSTATE_UP;
	//	keyboardMotion.Yaw = (motionKeyStates.TurnLeft == KEYSTATE_DOWN) ? MOTION_ANTICLOCKWISE : MOTION_NONE;
	//	break;
	//}
}

/*
	Called by GLUT when it's not rendering a frame.

	Note: We use this to handle animation and timing. You shouldn't need to modify
	this callback at all. Instead, place your animation logic (e.g. moving or rotating
	things) within the think() method provided with this template.
*/
void idle(void)
{
	// Wait until it's time to render the next frame.

	unsigned int frameTimeElapsed = (unsigned int)glutGet(GLUT_ELAPSED_TIME) - frameStartTime;
	if (frameTimeElapsed < FRAME_TIME)
	{
		// This frame took less time to render than the ideal FRAME_TIME: we'll suspend this thread for the remaining time,
		// so we're not taking up the CPU until we need to render another frame.
		unsigned int timeLeft = FRAME_TIME - frameTimeElapsed;
		Sleep(timeLeft);
	}

	// Begin processing the next frame.

	frameStartTime = glutGet(GLUT_ELAPSED_TIME); // Record when we started work on the new frame.

	think(); // Update our simulated world before the next call to display().

	glutPostRedisplay(); // Tell OpenGL there's a new frame ready to be drawn.
}

/******************************************************************************
 * Animation-Specific Functions (Add your own functions at the end of this section)
 ******************************************************************************/

 /*
	 Initialise OpenGL and set up our scene before we begin the render loop.
 */
void init(void)
{

	// enable depth testing
	glEnable(GL_DEPTH_TEST);

	// set background color to be black
	glClearColor(0, 0, 0, 1.0);


	initLights();

	//create the quadric for drawing the sphere
	sphereQuadric = gluNewQuadric();

	//create the quadric for drawing the cylinder
	cylinderQuadric = gluNewQuadric();
}

/*
	Advance our animation by FRAME_TIME milliseconds.

	Note: Our template's GLUT idle() callback calls this once before each new
	frame is drawn, EXCEPT the very first frame drawn after our application
	starts. Any setup required before the first frame is drawn should be placed
	in init().
*/
void think(void)
{

	thetaBowTie += 360 * FRAME_TIME_SEC; //360 degrees per second or 60 RPM

	/*
		Keyboard motion handler: complete this section to make your "player-controlled"
		object respond to keyboard input.
	*/
	if (keyboardMotion.Yaw != MOTION_NONE) {
		smHeading += keyboardMotion.Yaw * 360.0f * FRAME_TIME_SEC; //60 RPM
	}
	if (keyboardMotion.Surge != MOTION_NONE) {
		smPosition[2] += keyboardMotion.Surge * smSpeed * FRAME_TIME_SEC; //20 m/sec
	}
	if (keyboardMotion.Sway != MOTION_NONE) {
		smPosition[0] += keyboardMotion.Sway * smSpeed * FRAME_TIME_SEC; //20 m/sec
	}
	if (keyboardMotion.Heave != MOTION_NONE) {
		smPosition[1] += keyboardMotion.Heave * smSpeed * FRAME_TIME_SEC; //20 m/sec
	}
}

/*
	Initialise OpenGL lighting before we begin the render loop.

	Note (advanced): If you're using dynamic lighting (e.g. lights that move around, turn on or
	off, or change colour) you may want to replace this with a drawLights function that gets called
	at the beginning of display() instead of init().
*/
void initLights(void)
{
	// Simple lighting setup
	GLfloat globalAmbient[] = { 0.4f, 0.4f, 0.4f, 1 };
	GLfloat lightPosition[] = { 5.0f, 5.0f, 5.0f, 1.0f };
	GLfloat ambientLight[] = { 0, 0, 0, 1 };
	GLfloat diffuseLight[] = { 1, 1, 1, 1 };
	GLfloat specularLight[] = { 1, 1, 1, 1 };

	// Configure global ambient lighting.
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, globalAmbient);

	// Configure Light 0.
	glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);
	glLightfv(GL_LIGHT0, GL_AMBIENT, ambientLight);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuseLight);
	glLightfv(GL_LIGHT0, GL_SPECULAR, specularLight);

	// Enable lighting
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);

	// Make GL normalize the normal vectors we supply.
	glEnable(GL_NORMALIZE);

	// Enable use of simple GL colours as materials.
	glEnable(GL_COLOR_MATERIAL);
}

/******************************************************************************/


/*
   Draw an origin marker for modelling purposes
 */
void drawOrigin(void)
{
	glColor3f(0.0f, 1.0f, 1.0f);
	glutWireSphere(0.1, 10, 10);
	glBegin(GL_LINES);

	//x axis -red
	glColor3f(1.0f, 0.0f, 0.0f);
	glVertex3f(0.0f, 0.0f, 0.0f);
	glVertex3f(2.0f, 0.0f, 0.0f);

	//y axis -green
	glColor3f(0.0f, 1.0f, 0.0f);
	glVertex3f(0.0f, 0.0f, 0.0f);
	glVertex3f(0.0f, 2.0f, 0.0f);

	//z axis - blue
	glColor3f(0.0f, 0.0f, 1.0f);
	glVertex3f(0.0f, 0.0f, 0.0f);
	glVertex3f(0.0f, 0.0f, 2.0f);

	glEnd();
}


/*
	Draw a snowman with a rotating bowtie either filled or wireframe
*/
void drawSnowman(void)
{
	glColor3f(1.0, 1.0, 1.0);

	if (!renderFillEnabled)
		gluQuadricDrawStyle(sphereQuadric, GLU_LINE);
	else
		gluQuadricDrawStyle(sphereQuadric, GLU_FILL);

	glPushMatrix();

	//This allows up to move the snowman all its parts will follow
	//if we have set this up correctly
	//in Session 13 we will move the snowman mahattan style using our animationcontroller.c template
	glTranslatef(smPosition[0], smPosition[1], smPosition[2]); //then translate
	glRotated(smHeading, 0, 1, 0); //first rotate

	//draw the body
	gluSphere(sphereQuadric, BODY_RADIUS, 50, 50);

	//move the head origin, center of the sphere to the top of the body
	glTranslated(0.0, BODY_RADIUS, 0.0);


	glPushMatrix();

	//move the head to sit on top of body
	glTranslated(0.0, HEAD_RADIUS, 0.0);
	//draw the head
	gluSphere(sphereQuadric, HEAD_RADIUS, 50, 50);


	//eyes inherit the *all* the head translations
	//and any body transforms
	//place them a little bit higher	
	//right eye
	drawEye(rightSide);
	//left eye
	drawEye(leftSide);

	glPopMatrix();


	//draw the band relative to the body
	drawBand();

	//draw the bowtie relative to the band
	//this way the bowtie inherits the body and head transforms
	//if added a transform for the band e.g. we rotated the band above then
	//this should be setup so that it inherits that transfrom
	glPushMatrix();
	glRotated(thetaBowTie, 0, 0, 1);
	drawBow();
	glPopMatrix();


	glPopMatrix(); //end global snowman translate
}

/*
  Draws a single eye. The side parameter determins whether it is the
  left or right eye rendered
*/
void drawEye(enum Side side)
{
	glColor3f(0.3f, 0.3f, 0.3f);
	//right eye
	glPushMatrix();
	glTranslated(0, HEAD_RADIUS * 0.25, 0.0);
	//place the eyes at the right depth -front of face
	glTranslated(0.0, 0.0, HEAD_RADIUS - EYE_RADIUS);
	//locate on correct side of the head
	glTranslated((HEAD_RADIUS / 2) * side, 0.0, 0.0);
	gluSphere(sphereQuadric, EYE_RADIUS, 20, 20);
	glPopMatrix();
}


/*
  Draws the bow part of the bowtie
*/
void drawBow(void)
{
	glColor3f(1.0f, 0.0f, 1.0f);
	glPushMatrix();

	//draw bow code
	glTranslated(0.0, 0.0, BODY_RADIUS / 1.35);

	glPushMatrix();
	glTranslated(-(BOW_TIE_LENGTH / 2.0), 0, 0);
	glRotated(90, 0, 0, 1);
	glRotated(90, 1, 0, 0);
	gluCylinder(cylinderQuadric, BOW_TIE_WIDTH, BOW_TIE_WIDTH, BOW_TIE_LENGTH, 10, 10);
	glPopMatrix();

	//draw the bow end caps
	glPushMatrix();
	glTranslated(-BOW_TIE_LENGTH / 2, 0.0, 0.0);
	gluSphere(sphereQuadric, BOW_TIE_WIDTH, 10, 10);
	glPopMatrix();

	glPushMatrix();
	glTranslated(BOW_TIE_LENGTH / 2, 0.0, 0.0);
	gluSphere(sphereQuadric, BOW_TIE_WIDTH, 10, 10);
	glPopMatrix();

	glColor3f(0.8f, 0.0f, 0.8f);
	//draw the bow knot
	glPushMatrix();
	gluSphere(sphereQuadric, BOW_TIE_WIDTH*1.5, 6, 6);
	glPopMatrix();

	glPopMatrix();
}

/*
 Draws the band for the bowtie bow
*/
void drawBand(void)
{
	glColor3f(1.0f, 0.0f, 1.0f);
	glPushMatrix();

	glRotated(90, 1, 0, 0);

	if (!renderFillEnabled)
		glutWireTorus(BAND_WIDTH, (BODY_RADIUS + BAND_WIDTH) / 1.8, 10, 50);
	else
		glutSolidTorus(BAND_WIDTH, (BODY_RADIUS + BAND_WIDTH) / 1.8, 10, 50);

	glPopMatrix();

}

/*
  A simple ground plane in the XZ plane with vertex normals specified for lighting
  the top face of the ground. The bottom face is not lit.
*/
void basicGround(void)
{
	glColor3d(0.8, 0.9, 1);

	glPushMatrix();
	glTranslated(0, -BODY_RADIUS / 2, 0); //shifted this so looks like in snow

	glBegin(GL_QUADS);
	//back right corner
	glNormal3d(0, 1, 0);
	glVertex3d(0, 0, 0);
	glNormal3d(0, 1, 0);
	glVertex3d(10, 0, 0);
	glNormal3d(0, 1, 0);
	glVertex3d(10, 0, -10);
	glNormal3d(0, 1, 0);
	glVertex3d(0, 0, -10);
	//front right corner
	glNormal3d(0, 1, 0);
	glVertex3d(0, 0, 0);
	glNormal3d(0, 1, 0);
	glVertex3d(10, 0, 0);
	glNormal3d(0, 1, 0);
	glVertex3d(10, 0, 10);
	glNormal3d(0, 1, 0);
	glVertex3d(0, 0, 10);
	//front left corner
	glNormal3d(0, 1, 0);
	glVertex3d(0, 0, 0);
	glNormal3d(0, 1, 0);
	glVertex3d(-10, 0, 0);
	glNormal3d(0, 1, 0);
	glVertex3d(-10, 0, 10);
	glNormal3d(0, 1, 0);
	glVertex3d(0, 0, 10);
	//back left corner
	glNormal3d(0, 1, 0);
	glVertex3d(0, 0, 0);
	glNormal3d(0, 1, 0);
	glVertex3d(-10, 0, 0);
	glNormal3d(0, 1, 0);
	glVertex3d(-10, 0, -10);
	glNormal3d(0, 1, 0);
	glVertex3d(0, 0, -10);

	glEnd();

	glPopMatrix();
}
